#!/bin/bash
# can not set -e otherwise below do_version_check will not behave
# set -e # exit on error
# set -x

# Latest version may be checked (on user's consent) and used below
version=3.3.1
rev=ivy-1
name=zanata-cli-${version}-${rev}

: ${ZANATA_CLI_VERSION:="$version"}
: ${IVY_JAR:="/usr/share/java/ivy.jar"}

usage() {
  cat <<EOF
Usage: zanataj [OPTION]... <arguments>

 -I        : This help
 -Irefresh : Refresh Zanata artifacts
 -Idebug   : Enable java debugger
EOF
}

# Parse Low-level options
unset opt_refresh opt_debug

for arg in "$@"
do
  if [ "$arg" == "-Irefresh" ]
  then
    opt_refresh="true"
    shift 1
  elif [ "$arg" == "-Idebug" ]
  then
    opt_debug="true"
    shift 1
  elif [ "$arg" == "-I" ]
  then
    usage
    exit 0
  else
    break
  fi
done

if [ ! -r $IVY_JAR ]; then
  echo "Please install Apache Ivy to $IVY_JAR."
  echo "With Fedora or EPEL 6, run this as root: yum install apache-ivy"
  echo "On OSX (with Homebrew): brew install ivy [and set IVY_JAR to point to ivy.jar]"
  exit 1
fi




# Documentation for Ivy's command-line options are here:
# http://ant.apache.org/ivy/history/latest-milestone/standalone.html
# http://ant.apache.org/ivy/history/2.1.0/standalone.html
# java -jar /usr/share/java/ivy.jar -?

WORKDIR=$(mktemp -d -t zanata-cli.XXXXXX)

function cleanup() {
    if [[ -d "$WORKDIR" ]]
    then
        rm -r "$WORKDIR"
    fi
}
trap cleanup EXIT

# taken from http://stackoverflow.com/a/4024038/345718
# It will return 10 if the versions are the same, 11 if version 1 is greater than version 2 and 9 otherwise.
do_version_check() 
{
  [ "$1" == "$2" ] && return 10

  ver1front=`echo $1 | cut -d "." -f -1`
  ver1back=`echo $1 | cut -d "." -f 2-`

  ver2front=`echo $2 | cut -d "." -f -1`
  ver2back=`echo $2 | cut -d "." -f 2-`

  if [ "$ver1front" != "$1" ] || [ "$ver2front" != "$2" ]; then
     [ "$ver1front" -gt "$ver2front" ] && return 11
     [ "$ver1front" -lt "$ver2front" ] && return 9

     [ "$ver1front" == "$1" ] || [ -z "$ver1back" ] && ver1back=0
     [ "$ver2front" == "$2" ] || [ -z "$ver2back" ] && ver2back=0
     do_version_check "$ver1back" "$ver2back"
     return $?
  else
    [ "$1" -gt "$2" ] && return 11 || return 9
  fi
}

check_update() 
{
  if ! type xml_grep > /dev/null
  then
    echo "Please install xml_grep if you want to get notified when newer version is available"
    echo "With Feodra or EPEL, run this as root: yum install perl-XML-Twig"
    return 1
  else
    curl "https://oss.sonatype.org/service/local/artifact/maven/resolve?g=org.zanata&a=client&p=pom&v=LATEST&r=releases" > $WORKDIR/client_latest.xml
    # TODO error detection
    latest=$(xml_grep --cond "//version" --text_only $WORKDIR/client_latest.xml)
    do_version_check $ZANATA_CLI_VERSION $latest
    ver_comp=$?
    if [ $ver_comp -eq 9 ]
    then
      echo   "============================================================" #60 characters
      printf "= Latest client version is: %-10s =====================\n" "$latest"
      printf "= Your current version is:  %-10s =====================\n" "$ZANATA_CLI_VERSION"
      printf "= Will update to use %-10s ==\n" "$latest"
      echo   "============================================================"
    fi
  fi
}

# check zanata-client-update.properties file
FILE=$HOME/.config/zanata-client-update.properties
# read $FILE using the file descriptors
if [ -s $FILE ] && [ -r $FILE ]; then
  source $FILE
fi
should_check=1
if [ $lastChecked ] && [[ $lastChecked =~ 20[1-9][1-9]\-[01][0-9]\-[0-3][0-9] ]]; then
  diff_in_seconds=$(($(date -u +%s) - $(date -u -d"$lastChecked" +%s)))
  ((diff_in_days=diff_in_seconds/60/60/24))
fi

if [ $frequency ]; then
  case $frequency in
  monthly)
    ((should_check=diff_in_days-30))
  ;;
  daily)
    ((should_check=diff_in_days-1))
  ;;
  # by default treat it as weekly
  *)
    ((should_check=diff_in_days-7))
  ;;
  esac
else
  frequency=weekly
fi

# echo "frequency $frequency"

if [ -z $noAsking ]; then
  noAsking=false
fi

update_file()
{
  # make sure here replicates what org.zanata.client.commands.UpdateChecker does
  cat > $FILE <<EOF
lastChecked=$1
# Valid values: weekly|monthly|daily. Default is weekly.
frequency=$2
# true|false. If true will perform update check if needed without asking.
noAsking=$3
latest=$4
EOF
}

do_update()
{
  check_update
  if [ $? ]; then
    lastChecked=$(date +%Y-%m-%d)
    update_file "$lastChecked" "$frequency" "$noAsking" "$latest"
    echo "$FILE is updated. Check its content to control updates"
  fi
}

# echo "should check $should_check"

if [ $should_check -gt 0 ]; then
  echo "$diff_in_days days since last udpate check"
  if [ $noAsking != 'true' ]; then
    printf "Do you want to check for updates (y/n)?"
    while read opt
    do
      case "$opt" in
      y) do_update;;
      *) ;;
      esac
      break
    done
  else
    do_update
  fi
fi

if [ $latest ]; then
  ZANATA_CLI_VERSION=$latest
fi

echo "will be using zanata client version $ZANATA_CLI_VERSION"

IVYSETTINGS_XML="$WORKDIR/ivysettings.xml"

# ivysettings.xml as a here document
cat > $IVYSETTINGS_XML <<'EOF'
<ivysettings>
    <settings defaultResolver="default"/>
    <resolvers>
        <chain name="default">
            <!-- 1. Find artifacts in Maven Central -->
            <ibiblio name="central" m2compatible="true"/>
            <!-- 2. Find Zanata artifacts which are unreleased (or
                released but not yet in Central) -->
            <ibiblio name="oss-public" m2compatible="true"
                root="https://oss.sonatype.org/content/groups/public/"/>
        </chain>
    </resolvers>
</ivysettings>
EOF

# override ivy resolvers
IVY_SETTINGS="-settings $IVYSETTINGS_XML"

IVY_XML="$WORKDIR/ivy.xml"

# ivy.xml as a here document
cat > $IVY_XML <<EOF
<ivy-module version="2.0">
    <info organisation="org.zanata" module="zanataj" />

    <dependencies defaultconf="default">
        <dependency org="org.zanata" name="zanata-cli" rev="$ZANATA_CLI_VERSION">
            <!-- Omit unneeded dependency which conflicts with another one -->
            <exclude org="org.scannotation" />
            <!-- In some environments, Ivy tries to use the version "working@my.host.name" ! -->
            <exclude org="org.jboss.resteasy" module="resteasy-jaxb-provider" />
            <exclude org="org.jboss.resteasy" module="resteasy-multipart-provider" />
            <exclude org="org.slf4j" module="slf4j-simple" />
        </dependency>
        <dependency org="org.jboss.resteasy" name="resteasy-jaxb-provider" rev="3.0.1.Final" />
        <dependency org="org.jboss.resteasy" name="resteasy-multipart-provider" rev="3.0.1.Final" />
    </dependencies>
</ivy-module>
EOF

IVY_CONFIG="-ivy $IVY_XML"

IVY_LOG=$WORKDIR/ivy.log

# Other java options
JAVA_OPTS=""
# Enable Debugging
if [ "$opt_debug" == "true" ]; then
  JAVA_OPTS="$JAVA_OPTS -Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=4000,suspend=y"
fi

# Clear Zanata artifacts if requested
if [ "$opt_refresh" == "true" ]; then
  echo "Clearing cached Zanata artifacts..."
  rm -rf ~/.ivy2/cache/org.zanata
fi

# Resolve dependencies with ivy's normal logging
# but only output to console in case of failure.

# -refresh tells ivy to 'refresh dynamic resolved revisions' (eg SNAPSHOT deps)

echo "$name: resolving dependencies with Ivy..."
touch $IVY_LOG
columns=80
while line=$(tail -n 1 $IVY_LOG 2>/dev/null); do
  printf "%-*s\r" $columns "$line"
  sleep 1
done &

java \
  -jar $IVY_JAR \
  -cachepath $WORKDIR/classpath \
  $IVY_CONFIG $IVY_SETTINGS >> $IVY_LOG ||
  (echo "ERROR: dependency resolution failed.  Ivy log follows:"; cat $IVY_LOG; rm -f $IVY_LOG; exit 1)
rm -f $IVY_LOG
wait
printf "%-*s\r" $columns

# Invoke ZanataClient

java $JAVA_OPTS \
  -Dapp.name="$0" \
  -cp $(cat $WORKDIR/classpath) \
  org.zanata.client.ZanataClient "$@"

trap - EXIT
cleanup
exit 0
